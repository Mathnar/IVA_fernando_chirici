
{
"cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "
   ]
  },
   ],
   "source": [
    "#Functions definition\n",
    "\n",
    "def open_config_file(filename):\n",
    "    filepath = 'ex/'+filename+'.xml'\n",
    "    file = Path.cwd() / filepath\n",
    "    print(file)\n",
    "    with open(file, 'r') as f:\n",
    "        data = f.read()\n",
    "        root = data.getroot()\n",
    "        print('\\nroot.data', root.tag)\n",
    "        \n",
    "def access_config(filename):\n",
    "    #get data from excel file; specific sheet and row (fixed places)\n",
    "    #pd.read_excel('resultat-elections-2012.xls', sheet_name = 'France entière T1T2', skiprows = 2,  nrows= 5, usecols = 'A:H')\n",
    "    #pd.read_excel('resultat-elections-2012.xls', index_col = None, skiprows= 2, nrows= 5, sheet_name='France entière T1T2', usecols=range(0,8))\n",
    "    filepath = 'ex/'+filename+'.xml'\n",
    "    tree = ET.parse(filepath)\n",
    "    root = tree.getroot()\n",
    "\n",
    "    print('\\nroot.data', root.tag)\n",
    "    print('\\nroot.attrib', root.attrib)\n",
    "    selection = ['child', 'subchild', '2schild', '3schild', '4schild', '5schild', '6schild']\n",
    "    selection.insert(0, root)\n",
    "    print('\\n\\n')\n",
    "    print('\\ntest -> ', selection[0].tag, selection[0].attrib)\n",
    "    print('\\n\\n')\n",
    "    \n",
    "    #print('selection',selection)\n",
    "    i = 0\n",
    "    j = 1\n",
    "    while i in range(0,selection.__len__()):\n",
    "        print('\\nExpanding ', selection[i], '\\n_________________\\n')\n",
    "        k = i\n",
    "        while True:\n",
    "            try:\n",
    "                for selection[j] in selection[i + j - 1]:\n",
    "                    splitted_selection = str(selection[j]).split(\"'\")\n",
    "                    print(splitted_selection[1],'.tag ',selection[j].tag, ' -attribute: ', selection[j].attrib)\n",
    "                j += 1\n",
    "            except Exception as e:\n",
    "                print('\\nException ', e)\n",
    "                break   \n",
    "    i+=1\n",
    "\n",
    "\n",
    "\n",
    "def create_scenario_files(data, path_to_go):\n",
    "    a=0 \n",
    "    #set got from excel files for scenario base simulation:\n",
    "    #get data compile it in correct semantics and write it in the correct file and extension\n",
    "    #issue(?) opendrive and scenario extension\n",
    "    #return true when file have been written in the path_to_go\n",
    "\n",
    "def findAndReplace(file, tag, value):\n",
    "    tree.find('idinfo/timeperd/timeinfo/rngdates/begdate').text = '1/1/2011'\n",
    "tree.find('idinfo/timeperd/timeinfo/rngdates/enddate').text = '1/1/2011'\n",
    "tree.write(datafile)\n",
    "    \n",
    "    \n",
    "    tree.find('idinfo/timeperd/timeinfo/rngdates/begdate').text = '1/1/2011'\n",
    "    tree.find('idinfo/timeperd/timeinfo/rngdates/enddate').text = '1/1/2011'\n",
    "    tree.write(datafile)\n",
    "def main():\n",
    "    print(\"Let's go\\n\")\n",
    "    access_config('ProfilesCatalog')\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
],
"metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
},
"nbformat": 4,
"nbformat_minor": 2
}
